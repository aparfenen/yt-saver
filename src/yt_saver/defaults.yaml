# Global defaults (safe & stable)
save_dir: "./downloads"

# Sortable, compact filenames: date + optional time + index + short safe title
outtmpl: "%(upload_date>%Y-%m-%d)s%(release_timestamp>_%H-%M-%S|)s - %(autonumber)02d - %(title).100s.%(ext)s"

# Network / robustness
network:
  retries: 10
  fragment_retries: 10
  retry_sleep: "http:exp=1:30,fragment:exp=1:20"
  concurrent_fragment_downloads: 3
  socket_timeout: 30
  skip_unavailable_fragments: true
  sleep_requests: 0.75
  max_sleep_interval: 20

# Behavior
behavior:
  # NOTE: We override this to False automatically when a playlist is detected
  noplaylist: true
  continuedl: true
  overwrites: false
  windowsfilenames: true
  check_formats: true
  no_warnings: true
  ignoreerrors: true
  no_abort_on_error: true
  download_archive: "yt-dlp-archive.txt"

# Subtitles / metadata
media:
  writeinfojson: true
  writethumbnail: true
  embedthumbnail: true        # NOTE: WebM may remux to MKV to hold cover art
  addmetadata: true
  embedsubtitles: true
  writesubtitles: false       # keep only embedded subs (no extra .vtt/.srt)
  writeautomaticsub: true
  keep_subtitles: false       # delete .vtt/.srt after embedding
  keep_thumbnail: false       # delete thumbnail file after embedding
  # Choose one of the following lines:
  subtitleslangs: ["en.*", "ru.*"]   # broad: accept dialects/auto variants
  # subtitleslangs: ["en", "ru"]     # minimal: canonical tracks only
  subtitlesformat: "vtt/srt"         # VTT fits WebM best; SRT may trigger MKV remux

# Subdir templates (used by the wrapper; yt-dlp placeholders allowed)
subdirs:
  per_item: "%(title).80s [%(id)s]"
  per_playlist: "%(playlist_title).80s [%(playlist_id)s]"

# Advanced
advanced:
  # Placeholder used by yt-dlp when a field is missing in a template
  outtmpl_na_placeholder: "NA"

# Profiles (container/codec preferences)
profiles:
  webm:
    format: "bv*[ext=webm]+ba[ext=webm]/bv*+ba/best"
    merge_output_format: "webm"
    remuxvideo: "webm"
  mp4:
    # prefer h264/aac for max compatibility
    format: "bv*[vcodec*=avc1]+ba[acodec*=mp4a]/bv*+ba/best"
    merge_output_format: "mp4"
    remuxvideo: "mp4"
